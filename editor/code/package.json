{
  "name": "coq-lsp",
  "displayName": "Coq LSP",
  "description": "Coq LSP provides native vsCode support for checking Coq proof documents",
  "version": "0.2.4-dev",
  "contributors": [
    "Emilio Jes√∫s Gallego Arias <e@x80.org>",
    "Ali Caglayan <alizter@gmail.com>",
    "Shachar Itzhaky <shachari@cs.technion.ac.il>",
    "Ramkumar Ramachandra <r@artagnon.com>"
  ],
  "publisher": "ejgallego",
  "engines": {
    "vscode": "^1.82.0"
  },
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "keywords": [
    "interactive theorem proving",
    "dependent types",
    "coq",
    "software verification"
  ],
  "homepage": "https://github.com/ejgallego/coq-lsp",
  "repository": {
    "type": "git",
    "url": "https://github.com/ejgallego/coq-lsp"
  },
  "activationEvents": [
    "onLanguage:markdown",
    "onLanguage:latex"
  ],
  "capabilities": {
    "virtualWorkspaces": {
      "supported": "limited",
      "description": "File operations such as jump to definition are not supported in virtual workspaces. While almost fully functional, coq-lsp remains experiemental as a Web Extension."
    }
  },
  "contributes": {
    "languages": [
      {
        "id": "coq",
        "aliases": [
          "rocq",
          "Coq",
          "coq",
          "Gallina",
          "gallina"
        ],
        "extensions": [
          ".v"
        ],
        "configuration": "./coq.configuration.json"
      },
      {
        "id": "markdown",
        "aliases": [
          "Markdown"
        ],
        "extensions": [
          ".mv"
        ]
      },
      {
        "id": "latex",
        "aliases": [
          "LaTeX"
        ],
        "extensions": [
          ".lv",
          "v.tex"
        ]
      }
    ],
    "grammars": [
      {
        "language": "coq",
        "scopeName": "source.coq",
        "path": "./syntaxes/coq.json"
      },
      {
        "scopeName": "markdown.coq.codeblock",
        "path": "./syntaxes/markdown-coq-codeblock.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.coq": "coq"
        }
      }
    ],
    "commands": [
      {
        "command": "coq-lsp.start",
        "title": "Coq LSP: Start the Coq Language Server"
      },
      {
        "command": "coq-lsp.stop",
        "title": "Coq LSP: Stop the Coq Language Server"
      },
      {
        "command": "coq-lsp.restart",
        "title": "Coq LSP: Restart the Coq Language Server"
      },
      {
        "command": "coq-lsp.toggle",
        "title": "Coq LSP: Toggle the running status of Coq Language Server"
      },
      {
        "command": "coq-lsp.toggle_mode",
        "title": "Coq LSP: Toggle checking mode between continous / on-demand"
      },
      {
        "command": "coq-lsp.goals",
        "title": "Coq LSP: Show Goals at point"
      },
      {
        "command": "coq-lsp.document",
        "title": "Coq LSP: Serialize document to JSON"
      },
      {
        "command": "coq-lsp.save",
        "title": "Coq LSP: Save .vo file for the current buffer"
      },
      {
        "command": "coq-lsp.trim",
        "title": "Coq LSP: Free memory"
      },
      {
        "command": "coq-lsp.sentenceNext",
        "title": "Coq LSP: Try to jump to next Coq sentence"
      },
      {
        "command": "coq-lsp.sentencePrevious",
        "title": "Coq LSP: Try to jump to previous Coq sentence"
      },
      {
        "command": "coq-lsp.heatmap.toggle",
        "title": "Coq LSP: Toggle heatmap"
      },
      {
        "command": "coq-lsp.petanque.start",
        "title": "Coq LSP: Start a petanque session for theorem (Coq developer-only command)"
      },
      {
        "command": "coq-lsp.petanque.run",
        "title": "Coq LSP: Run a tactic over a petanque session (Coq developer-only command)"
      }
    ],
    "keybindings": [
      {
        "command": "coq-lsp.goals",
        "key": "Alt+enter",
        "mac": "Alt+Shift+enter",
        "when": "editorTextFocus && (editorLangId == coq || editorTextFocus && editorLangId == markdown)"
      },
      {
        "command": "coq-lsp.sentenceNext",
        "key": "Alt+N",
        "mac": "Alt+N",
        "when": "editorTextFocus && (editorLangId == coq || editorTextFocus && editorLangId == markdown)"
      },
      {
        "command": "coq-lsp.sentencePrevious",
        "key": "Alt+P",
        "mac": "Alt+P",
        "when": "editorTextFocus && (editorLangId == coq || editorTextFocus && editorLangId == markdown)"
      }
    ],
    "viewsContainers": {
      "panel": [
        {
          "id": "coq-performance-report",
          "title": "Coq",
          "icon": "$(notebook)"
        }
      ]
    },
    "views": {
      "coq-performance-report": [
        {
          "type": "webview",
          "id": "coqPerfView",
          "name": "Performance Report"
        }
      ]
    },
    "configuration": [
      {
        "title": "Diagnostics",
        "type": "object",
        "properties": {
          "coq-lsp.eager_diagnostics": {
            "type": "boolean",
            "default": true,
            "description": "Send diagnostics as document is processed; if false, diagnostics are only sent when Coq finishes processing the file"
          },
          "coq-lsp.show_coq_info_messages": {
            "type": "boolean",
            "default": false,
            "description": "Show Coq's \"Info\" messages as diagnostics, such as 'foo has been defined.' and miscellaneous operational messages."
          },
          "coq-lsp.show_notices_as_diagnostics": {
            "type": "boolean",
            "default": false,
            "description": "Show Coq's \"Notice\" messages as diagnostics, such as `About` and `Search` output."
          },
          "coq-lsp.max_errors": {
            "type": "number",
            "default": 150,
            "description": "Maximum number of errors per file, after that, coq-lsp will stop checking the file."
          },
          "coq-lsp.send_diags_extra_data": {
            "type": "boolean",
            "default": false,
            "description": "Send extra diagnostics data, usually on error"
          },
          "coq-lsp.send_perf_data": {
            "type": "boolean",
            "default": true,
            "description": "Update Perf Data Coq Panel"
          }
        }
      },
      {
        "title": "Hover",
        "type": "object",
        "properties": {
          "coq-lsp.show_stats_on_hover": {
            "type": "boolean",
            "default": false,
            "description": "Show timing and memory stats for a sentence on hover."
          },
          "coq-lsp.show_loc_info_on_hover": {
            "type": "boolean",
            "default": false,
            "description": "Show parsing information for a sentence on hover."
          },
          "coq-lsp.show_universes_on_hover": {
            "type": "boolean",
            "default": false,
            "description": "Show universe information and diff for a sentence on hover."
          },
          "coq-lsp.show_state_hash_on_hover": {
            "type": "boolean",
            "default": false,
            "description": "Show state hash on hover."
          }
        }
      },
      {
        "title": "Goals and Info Panel",
        "type": "object",
        "properties": {
          "coq-lsp.goal_after_tactic": {
            "type": "boolean",
            "default": false,
            "description": "When showing goals and the cursor is in a tactic, if false, show goals before executing the tactic, if true, show goals after"
          },
          "coq-lsp.show_goals_on": {
            "type": "number",
            "default": 3,
            "description": "When to show goals and information about the current cursor",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "enumItemLabels": [
              "Don't follow cursor",
              "Show on click",
              "Show on click and on cursor movement",
              "Show on click, cursor, and command movement"
            ]
          },
          "coq-lsp.pp_type": {
            "type": "number",
            "default": 1,
            "description": "Method to Print Coq Terms",
            "enum": [
              0,
              1,
              2
            ],
            "enumDescriptions": [
              "Print to string",
              "Use jsCoq's Pp rich layout printer",
              "Coq Layout Engine (experimental)"
            ]
          }
        }
      },
      {
        "title": "Language Server Binary",
        "type": "object",
        "properties": {
          "coq-lsp.trace.server": {
            "scope": "window",
            "type": "string",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "default": "messages",
            "description": "Traces the communication between VS Code and the language server."
          },
          "coq-lsp.debug": {
            "type": "boolean",
            "default": false,
            "description": "Enable Debug in Coq Server, usually this will produce backtraces on errors"
          },
          "coq-lsp.path": {
            "type": "string",
            "default": "coq-lsp",
            "description": "Path to the coq-lsp binary, by default, search in PATH"
          },
          "coq-lsp.args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Arguments to the coq-lsp server"
          }
        }
      },
      {
        "title": "Proof Checking",
        "type": "object",
        "properties": {
          "coq-lsp.admit_on_bad_qed": {
            "type": "boolean",
            "default": true,
            "description": "If a `Qed.` command fails, admit the proof automatically."
          },
          "coq-lsp.check_only_on_request": {
            "type": "boolean",
            "default": true,
            "description": "(Experimental) Check files lazily, that is to say, goal state for a point will only be computed when the data is actually demanded."
          },
          "coq-lsp.check_on_scroll": {
            "type": "boolean",
            "default": true,
            "description": "(Experimental) When in lazy mode, check files on scroll."
          }
        }
      },
      {
        "title": "Input",
        "type": "object",
        "properties": {
          "coq-lsp.unicode_completion": {
            "type": "string",
            "default": "normal",
            "enum": [
              "off",
              "normal",
              "extended"
            ],
            "description": "Enable Server-Side Unicode Completion. Coq-lsp provides two character sets, a regular one, and an extended one with more than 1000 symbols."
          }
        }
      },
      {
        "title": "Coq Editor",
        "type": "object",
        "properties": {
          "coq-lsp.updateIgnores": {
            "type": "boolean",
            "default": true,
            "description": "Automatically ignore Coq object files in the workspace (.vo, .vos, ...)"
          }
        }
      },
      {
        "title": "Heatmap",
        "type": "object",
        "properties": {
          "coq-lsp.heatmap.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable heatmap for Coq files."
          },
          "coq-lsp.heatmap.warmColor": {
            "type": "string",
            "default": "#ff0000",
            "description": "Defines the warm color for the heatmap."
          },
          "coq-lsp.heatmap.coldColor": {
            "type": "string",
            "default": "#000000",
            "description": "Defines the cold color for the heatmap."
          },
          "coq-lsp.heatmap.heatLevels": {
            "type": "number",
            "default": 100,
            "description": "Defines the number of heat levels in the heatmap."
          },
          "coq-lsp.heatmap.mode": {
            "type": "string",
            "default": "time",
            "enum": [
              "time",
              "memory"
            ],
            "description": "Defines the heatmap mode."
          }
        }
      }
    ]
  },
  "devDependencies": {
    "@types/jquery": "^3.5.20",
    "@types/node": "^18.18.1",
    "@types/object-hash": "^3.0.4",
    "@types/react": "^18.2.24",
    "@types/react-dom": "^18.2.8",
    "@types/throttle-debounce": "^5.0.0",
    "@types/vscode": "^1.75.0",
    "@types/vscode-webview": "^1.57.2",
    "esbuild": "^0.16.17",
    "prettier": "^3.2.5",
    "typescript": "^5.2.2",
    "@vscode/vsce": "^2.21.1"
  },
  "dependencies": {
    "@vscode/webview-ui-toolkit": "^1.2.2",
    "jquery": "^3.7.1",
    "object-hash": "^3.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "throttle-debounce": "^5.0.0",
    "vscode-languageclient": "^9.0.1",
    "vscode-languageserver-types": "^3.17.5"
  },
  "main": "./out/src/node.js",
  "browser": "/out/src/browser.js",
  "scripts": {
    "vscode:prepublish": "npm run typecheck && npm run esbuild -- --minify --sourcemap=no",
    "esbuild": "node esbuild.mjs",
    "typecheck": "tsc -b",
    "compile": "npm run esbuild",
    "watch": "npm run esbuild -- --watch"
  }
}

(executable
 (name wacoq_worker)
 (modes byte exe)
 (libraries controller wacoq_subproc)
 (ocamlc_flags -no-check-prims)
 (link_flags -linkall))

(library
 (name wacoq_subproc)
 (modes native)
 (modules) ; none
 (foreign_stubs
  (language c)
  (names wacoq_extern)))

(rule
 (target dllcoqrun_stubs.wasm)
 (deps
  (:c_source byterun_stubs.c))
 (action
  (bash
   "/opt/wasi-sdk/bin/clang -target wasm32-unknown-emscripten -D__wasi__ -fPIC %{c_source} -o %{target} -nostdlib -Wl,--shared -Wl,--export-all -I%{ocaml-config:standard_library}")))

(rule
 (target dllcoqperf_stubs.wasm)
 (deps
  (:c_source perf_stubs.c))
 (action
  (bash
   "/opt/wasi-sdk/bin/clang -target wasm32-unknown-emscripten -D__wasi__ -fPIC %{c_source} -o %{target} -nostdlib -Wl,--shared -Wl,--export-all -I%{ocaml-config:standard_library}")))

(rule
 (target dllbigstringaf_stubs.wasm)
 (deps
  (:c_source bigstringaf_stubs.c))
 (action
  (bash
   "/opt/wasi-sdk/bin/clang -target wasm32-unknown-emscripten -D__wasi__ -fPIC %{c_source} -o %{target} -nostdlib -Wl,--shared -Wl,--export-all -I%{ocaml-config:standard_library}")))

; This is the jsCoq / coq-lsp special library

(rule
 (target dlllib_stubs.wasm)
 (deps
  (:c_source lib_stubs.c))
 (action
  (bash
   "/opt/wasi-sdk/bin/clang -target wasm32-unknown-emscripten -D__wasi__ -fPIC %{c_source} -o %{target} -nostdlib -Wl,--shared -Wl,--export-all -I%{ocaml-config:standard_library}")))

; (rule
;  (target jscoq_version.ml)
;  (deps package.json)
;  (action
;   (with-stdout-to
;    %{target}
;    (run
;     node
;     -p
;     "`let jscoq_version = \"${require(\"package.json\").version}\"`"))))

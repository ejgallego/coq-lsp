(executable
 (name coq_lsp_worker)
 (modes js)
 (preprocess
  (pps js_of_ocaml-ppx))
 (js_of_ocaml
  (javascript_files
   js_stub/mutex.js
   js_stub/unix.js
   js_stub/coq_vm.js
   js_stub/coq_perf.js
   js_stub/interrupt.js
   coq-fs-core.js
   coq-fs.js
   marshal-arch.js)
  (flags
   :standard
   --linkall
   --dynlink
   ; --toplevel
   (:include .extraflags)
   ; +toplevel.js
   ; --enable
   ; with-js-error
   ; --enable
   ; debuginfo
   ; --no-inline
   ; --debug-info
   ; --source-map
   ; --file=%{dep:coq-fs}
   --setenv
   PATH=/bin))
 (link_flags -no-check-prims)
 ; The old makefile set: -noautolink -no-check-prims
 (libraries
  zarith_stubs_js
  yojson
  controller
  ; js_of_ocaml-toplevel
  ; js_of_ocaml-compiler.dynlink
  ; js_of_ocaml-compiler.findlib-support
  ))

(rule
 (target coq_lsp_worker.bc.cjs)
 (mode promote)
 (action
  (copy coq_lsp_worker.bc.js coq_lsp_worker.bc.cjs)))

(rule
 (targets marshal-arch.js)
 (action
  (copy js_stub/marshal%{ocaml-config:word_size}.js %{targets})))

(rule
 (targets coq-fs.js)
 (deps
  (package coq-stdlib))
 (action
  (bash
   "export COQW=$(coqc -where) && js_of_ocaml build-fs -o coq-fs.js $(cd $COQW && find theories user-contrib \\( -wholename 'theories/*.vo' -or -wholename 'theories/*.glob' -or -wholename 'theories/*.v' -or -wholename 'user-contrib/*.vo' -or -wholename 'user-contrib/*.v' -or -wholename 'user-contrib/*.glob' \\) -printf \"$COQW/%p:/static/coqlib/%p \")")))

; for coq-fs-core.js
; js_of_ocaml build-fs -o coq-fs-core.js $(find rocq-runtime/ -wholename '*/plugins/*/*.cma' -or -wholename '*/META' -printf "%p:/lib/%p")

; (rule
;  (targets coq-fs-core.js)
;  (deps
;   (package rocq-runtime))
;  (action
;   (bash
;    "cd ../vendor/coq && js_of_ocaml build-fs -o ../../controller-js/coq-fs.js $(find theories -wholename 'theories/Init/*.vo' -printf '%p:/static/%p '")))

; Set debug flags if JSCOQ_DEBUG environment variable is set.
; (ugly, but there are no conditional expressions in Dune)

(rule
 (targets .extraflags)
 (deps
  (env_var JSCOQ_DEBUG))
 (action
  (with-stdout-to
   %{targets}
   (bash
    "echo '(' ${JSCOQ_DEBUG+ --pretty --noinline --disable shortvar --debug-info} ')'"))))
